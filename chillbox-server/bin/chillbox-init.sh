#!/usr/bin/env sh

set -o errexit

if [ -e /etc/chillbox/init-date.txt ]; then
  # TODO: The chillbox-init.sh script should be idempotent.
  echo "The $0 script has already been executed."
  exit 1
fi

tech_email="${TECH_EMAIL:-}"
immutable_bucket_name="${IMMUTABLE_BUCKET_NAME:-}"
immutable_bucket_domain_name="${IMMUTABLE_BUCKET_DOMAIN_NAME:-}"
artifact_bucket_name="${ARTIFACT_BUCKET_NAME:-}"
sites_artifact="${SITES_ARTIFACT:-}"
s3_endpoint_url="${S3_ENDPOINT_URL:-}"
chillbox_server_name="${CHILLBOX_SERVER_NAME:-}"
manage_hostname_dns_records="${MANAGE_HOSTNAME_DNS_RECORDS:-false}"
manage_dns_records="${MANAGE_DNS_RECORDS:-false}"
acme_server="${ACME_SERVER:-}"
enable_certbot="${ENABLE_CERTBOT:-}"

if [ -z "$tech_email" ]; then
  printf '\n%s\n' "No TECH_EMAIL variable set."
  printf '\n%s\n' "Enter the contact email address to use for notifications."
  test -z "$INTERACTIVE" || read -r tech_email
  test -n "$tech_email" || (echo "No tech email set. Exiting" && exit 1)
fi

if [ -z "$immutable_bucket_name" ]; then
  printf '\n%s\n' "No IMMUTABLE_BUCKET_NAME variable set."
  printf '\n%s\n' "Enter the immutable bucket name to use."
  test -z "$INTERACTIVE" || read -r immutable_bucket_name
  test -n "$immutable_bucket_name" || (echo "No immutable bucket name set. Exiting" && exit 1)
fi

if [ -z "$immutable_bucket_domain_name" ]; then
  printf '\n%s\n' "No IMMUTABLE_DOMAIN_BUCKET_NAME variable set."
  printf '\n%s\n' "Enter the immutable bucket domain name to use."
  test -z "$INTERACTIVE" || read -r immutable_bucket_domain_name
  test -n "$immutable_bucket_domain_name" || (echo "No immutable bucket domain name set. Exiting" && exit 1)
fi

if [ -z "$artifact_bucket_name" ]; then
  printf '\n%s\n' "No ARTIFACT_BUCKET_NAME variable set."
  printf '\n%s\n' "Enter the artifact bucket name to use."
  test -z "$INTERACTIVE" || read -r artifact_bucket_name
  test -n "$artifact_bucket_name" || (echo "No artifact bucket name set. Exiting" && exit 1)
fi

if [ -z "$sites_artifact" ]; then
  printf '\n%s\n' "No SITES_ARTIFACT variable set."
  printf '\n%s\n' "Enter the sites artifact file to use."
  test -z "$INTERACTIVE" || read -r sites_artifact
  test -n "$sites_artifact" || (echo "No sites artifact file set. Exiting" && exit 1)
fi

if [ -z "$s3_endpoint_url" ]; then
  printf '\n%s\n' "No S3_ENDPOINT_URL variable set."
  printf '\n%s\n' "Enter the s3 endpoint URL to use."
  test -z "$INTERACTIVE" || read -r s3_endpoint_url
  test -n "$s3_endpoint_url" || (echo "No s3 endpoint URL set. Exiting" && exit 1)
fi

if [ -z "$chillbox_server_name" ]; then
  printf '\n%s\n' "No CHILLBOX_SERVER_NAME variable set."
  printf '\n%s\n' "Enter the chillbox server name to use which should be a fully qualified domain name."
  test -z "$INTERACTIVE" || read -r chillbox_server_name
  test -n "$chillbox_server_name" || (echo "No chillbox server name set. Exiting" && exit 1)
fi

if [ -z "$acme_server" ]; then
  printf '\n%s\n' "No ACME_SERVER variable set."
  printf '\n%s\n' "Enter the server to use when certbot is getting certificates."
  test -z "$INTERACTIVE" || read -r acme_server
  test -n "$acme_server" || (echo "No ACME server set. Exiting" && exit 1)
fi

cleanup() {
  echo ""
}
trap cleanup EXIT

apk update
apk add sed attr grep coreutils jq entr

apk add openssl

# Include common tools for deployment and management
apk add rsync

# Add other tools that are helpful when troubleshooting.
apk add mandoc man-pages docs
apk add vim


build_date=$(date)
cat <<ENVFILE > /home/dev/.env
# Generated by $0
#
# Do not edit this file.
#
# Do not set secrets in this file even though it should only be readable by
# 'dev' user. Secrets should be encrypted when on disk or saved as plaintext on
# a tmpfs mount.
#
# The sitejsonplaceholder-* values are set per *.site.json file.
#
# Also update the site-init-service-object.sh which duplicates setting these
# with the exception of the placeholders.
#
export ARTIFACT_BUCKET_NAME="${artifact_bucket_name}"
export AWS_PROFILE=chillbox_object_storage
export CHILLBOX_SERVER_NAME="${chillbox_server_name}"
export CHILLBOX_SERVER_PORT=80
export IMMUTABLE_BUCKET_DOMAIN_NAME="${immutable_bucket_domain_name}"
export IMMUTABLE_BUCKET_NAME="${immutable_bucket_name}"
export ACME_SERVER="${acme_server}"
export MANAGE_HOSTNAME_DNS_RECORDS="${manage_hostname_dns_records}"
export MANAGE_DNS_RECORDS="${manage_dns_records}"
export ENABLE_CERTBOT="${enable_certbot}"
export S3_ENDPOINT_URL="${s3_endpoint_url}"
export SERVER_NAME="sitejsonplaceholder-server_name"
export SERVER_PORT=80
export CHILLBOX_SUBNET=127.0.0.1
export SLUGNAME="sitejsonplaceholder-slugname"
export TECH_EMAIL="${tech_email}"
export VERSION="sitejsonplaceholder-version"
ENVFILE
chown dev:dev /home/dev/.env
chmod 0400 /home/dev/.env

# Also update the template: src/ansible/playbooks/chillbox.config.jinja2
cat <<CONFIGFILE > /etc/chillbox/chillbox.config
# Initially generated by $0
# Date ${build_date}
# Updating this file should trigger a process that runs the
# /etc/chillbox/bin/update.sh script.

# These artifact files are in the ${artifact_bucket_name} s3 bucket.
# /_sites/
export SITES_ARTIFACT="${sites_artifact}"
CONFIGFILE
chown dev:dev /etc/chillbox/chillbox.config
chmod 0660 /etc/chillbox/chillbox.config

# Always source the chillbox.config before the .env to prevent chillbox.config
# overwriting settings that are in the .env.
# shellcheck disable=SC1091
. /etc/chillbox/chillbox.config
# shellcheck disable=SC1091
. /home/dev/.env

# UPKEEP due: "2023-07-22" label: "s5cmd for s3 object storage" interval: "+6 months"
s5cmd_release_url="https://github.com/peak/s5cmd/releases/download/v2.0.0/s5cmd_2.0.0_Linux-64bit.tar.gz"
s5cmd_checksum="379d054f434bd1fbd44c0ae43a3f0f11a25e5c23fd9d7184ceeae1065e74e94ad6fa9e42dadd32d72860b919455e22cd2100b6315fd610d8bb4cfe81474621b4"
s5cmd_tar="$(basename "$s5cmd_release_url")"
s5cmd_tmp_dir="$(mktemp -d)"
wget -P "$s5cmd_tmp_dir" -O "$s5cmd_tmp_dir/$s5cmd_tar" "$s5cmd_release_url"
sha512sum "$s5cmd_tmp_dir/$s5cmd_tar"
echo "$s5cmd_checksum  $s5cmd_tmp_dir/$s5cmd_tar" | sha512sum -c \
  || ( \
    echo "Cleaning up in case errexit is not set." \
    && mv --verbose "$s5cmd_tmp_dir/$s5cmd_tar" "$s5cmd_tmp_dir/$s5cmd_tar.INVALID" \
    && exit 1 \
    )
tar x -o -f "$s5cmd_tmp_dir/$s5cmd_tar" -C "/usr/local/bin" s5cmd
rm -rf "$s5cmd_tmp_dir"

chmod 0444 /etc/chillbox/redis/redis.conf

## RUN_INSTALL_SCRIPTS
/etc/chillbox/bin/install-s5cmd.sh
/etc/chillbox/bin/install-chill.sh
/etc/chillbox/bin/install-service-dependencies.sh
/etc/chillbox/bin/install-certbot.sh
/etc/chillbox/bin/install-redis.sh

## Setup the watcher process for chillbox.config file changes.
mkdir -p /etc/init.d
cat <<MEOW > /etc/init.d/chillbox-trigger-update
#!/sbin/openrc-run
supervisor=s6
name="chillbox-trigger-update"
procname="chillbox-trigger-update"
description="Watch the /etc/chillbox/chillbox.config file for changes and run update.sh"
s6_service_path=/etc/services.d/chillbox-trigger-update
depend() {
  need s6-svscan
}
MEOW
chmod +x "/etc/init.d/chillbox-trigger-update"
mkdir -p "/etc/services.d/chillbox-trigger-update"
cat <<PURR > "/etc/services.d/chillbox-trigger-update/run"
#!/usr/bin/execlineb -P
s6-setuidgid root
fdmove -c 2 1
/etc/chillbox/bin/watch-chillbox-config.sh
PURR
chmod +x "/etc/services.d/chillbox-trigger-update/run"
rc-update add "chillbox-trigger-update" default
rc-service "chillbox-trigger-update" start

## WORKDIR /usr/local/src/
mkdir -p /usr/local/src/

## RUN NGINX_CONF
/etc/chillbox/bin/init-nginx.sh

/etc/chillbox/bin/site-init.sh
/etc/chillbox/bin/reload-templates.sh

nginx -t
rc-update add nginx default
rc-service nginx start

if [ "$enable_certbot" = "true" ]; then
  mkdir -p /etc/chillbox/sites/.has-certs
  chown -R dev:dev /etc/chillbox/sites/.has-certs
  su dev -c '/etc/chillbox/bin/issue-and-install-certs.sh' || echo "WARNING: Failed to run issue-and-install-certs.sh"
  /etc/chillbox/bin/reload-templates.sh

  # Renew after issue-and-install-certs.sh in case it downloaded an almost expired
  # cert from s3 object storage. This helps prevent a gap from happening if the
  # cron job to renew doesn't happen in time.
  su dev -c "certbot renew --user-agent-comment 'chillbox/0.0' --server '$ACME_SERVER'"

  # TODO Set a certbot renew hook to upload the renewed certs to s3 and set
  # life-cycle rule to expire them in 30 days. Add the s3 upload script to the
  # /etc/letsencrypt/renewal-hooks/deploy/ directory.
  # Environment variables available to deploy hook:
  #   RENEWED_LINEAGE will equal /etc/letsencrypt/live/$cert_name directory.
  #   RENEWED_DOMAINS will equal the $domain_list
  # https://eff-certbot.readthedocs.io/en/stable/using.html#certbot-command-line-options
  # https://eff-certbot.readthedocs.io/en/stable/using.html#renewing-certificates
  # https://letsencrypt.org/docs/integration-guide/#when-to-renew

  # Set a random time that the certbot renew happens to avoid hitting limits with
  # letsencrypt ACME server. The dev user is used to run certbot renew commands.
  random_day_of_week="$(awk 'BEGIN{srand(); print int(rand()*7)}')"
  random_start_hour="$(awk 'BEGIN{srand(); print int(rand()*11)}')"
  echo "0 $random_start_hour * * $random_day_of_week su dev -c \"awk 'BEGIN{srand(); print int(rand()*((60*60*12)+1))}' | xargs sleep && certbot renew --server '$acme_server' --user-agent-comment 'chillbox/0.0' -q\" && nginx -t && rc-service nginx reload" \
    | tee -a /etc/crontabs/root
fi

nginx -t && rc-service nginx reload

# This script shouldn't be executed again.
chmod -x "$0"

# Create the init-date.txt file when this script has successfully run. This is
# to prevent running the chillbox-init.sh script again.
date > /etc/chillbox/init-date.txt
