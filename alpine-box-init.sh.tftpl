#!/usr/bin/env sh

set -o errexit

apk update
apk add sed attr grep

addgroup dev
adduser -G dev -D dev
# TODO: Set password as expired to force user to reset when logging in

# A box that has been provisioned via the cloud provider should already have
# public keys added. This handles a locally provisioned box.
if [ ! -e /root/.ssh/authorized_keys ]; then
  mkdir -p /root/.ssh
  for github_username in ${developer_ssh_key_github_list}; do
    wget https://github.com/$github_username.keys -O - | tee -a /root/.ssh/authorized_keys
  done
  chown -R root:root /root/.ssh
  chmod -R 700 /root/.ssh
  chmod -R 644 /root/.ssh/authorized_keys
fi

# The dev user will also use the same keys as root.
mkdir -p /home/dev/.ssh
cp /root/.ssh/authorized_keys /home/dev/.ssh/
chown -R dev:dev /home/dev/.ssh
chmod -R 700 /home/dev/.ssh
chmod -R 644 /home/dev/.ssh/authorized_keys

# Use doas instead of sudo since sudo seems bloated.
apk add doas
cat <<DOAS_CONFIG > /etc/doas.d/doas.conf
permit persist dev as root
DOAS_CONFIG

# Configure sshd to only allow users with authorized_keys to ssh in. The root
# user is blocked from logging in. PAM needs to be added and enabled for it to
# work with the AuthorizedKeysFile and publickey method.
apk add openssh-server-pam

cat <<SSHD_CONFIG > /etc/ssh/sshd_config
AuthenticationMethods publickey
AuthorizedKeysFile .ssh/authorized_keys
KbdInteractiveAuthentication no
PasswordAuthentication no
PermitRootLogin no
PubkeyAuthentication yes
UsePAM yes
SSHD_CONFIG

sshd -t
rc-service sshd restart

cat <<'ENVFILE' > /home/dev/.env
export IMMUTABLE_BUCKET_NAME="${immutable_bucket_name}"
export ARTIFACT_BUCKET_NAME="${artifact_bucket_name}"
export S3_ENDPOINT_URL="${s3_endpoint_url}"
export S3_ARTIFACT_ENDPOINT_URL="${s3_endpoint_url}"
export AWS_ACCESS_KEY_ID="${access_key_id}"
export AWS_SECRET_ACCESS_KEY="${secret_access_key}"
export CHILLBOX_ARTIFACT="${chillbox_artifact}"
export CHILLBOX_SERVER_NAME="${chillbox_hostname}"
#export PIP_CHILL="chill==0.9.0"
export PIP_CHILL="git+https://github.com/jkenlooper/chill.git@develop#egg=chill"
export SITES_ARTIFACT="${sites_artifact}"
export TECH_EMAIL="${tech_email}"
export ACME_SH_VERSION="3.0.1"
#export LETS_ENCRYPT_SERVER="letsencrypt"
export LETS_ENCRYPT_SERVER="letsencrypt_test"
ENVFILE
chown dev:dev /home/dev/.env
source /home/dev/.env

#apk add --no-cache gnupg gnupg-dirmngr

## nginx
apk add nginx
nginx -v

## chill
apk add \
  py3-pip \
  gcc \
  python3 \
  python3-dev \
  libffi-dev \
  build-base \
  musl-dev \
  make \
  git \
  sqlite
ln -s /usr/bin/python3 /usr/bin/python
python --version
python -m pip install --disable-pip-version-check "$PIP_CHILL"
chill --version

## aws-cli, jq
apk add jq aws-cli
aws --version
apk add gettext

## letsencrypt acme.sh
echo "letsencrypt acme.sh"
mkdir -p /usr/local/bin/
cd /usr/local/bin/
tmp_acme_tar=$(mktemp)
wget -O $tmp_acme_tar https://github.com/acmesh-official/acme.sh/archive/refs/tags/$ACME_SH_VERSION.tar.gz
tmp_md5sum=$(mktemp)
echo "21f4b4b88df5d7fb89bf15df9a8a8c94  -" > $tmp_md5sum
cat $tmp_acme_tar | md5sum --check $tmp_md5sum
tar x -z -f $tmp_acme_tar --strip-components 1 acme.sh-$ACME_SH_VERSION/acme.sh
#mkdir -p /etc/acmesh
#mkdir -p /etc/acmesh/certs
acme.sh --install \
  --email $TECH_EMAIL \
  --server $LETS_ENCRYPT_SERVER \
  --no-profile
  #--home /etc/acmesh \
  #--accountconf /etc/acmesh/account.conf \
  #--cert-home /etc/acmesh/certs

## chillbox artifact
echo "chillbox artifact"
tmp_chillbox_artifact=$(mktemp)
aws \
  --endpoint-url "$S3_ARTIFACT_ENDPOINT_URL" \
  s3 cp s3://$ARTIFACT_BUCKET_NAME/chillbox/$CHILLBOX_ARTIFACT \
  $tmp_chillbox_artifact

cd /etc/nginx
tar x -z -f $tmp_chillbox_artifact nginx.conf

mkdir -p /etc/nginx/conf.d && cd /etc/nginx/conf.d
tar x -z -f $tmp_chillbox_artifact default.nginx.conf

mkdir -p /etc/chillbox && cd /etc/chillbox
tar x -z -f $tmp_chillbox_artifact templates

mkdir -p /etc/chillbox/bin
tar x -z -f $tmp_chillbox_artifact -C /etc/chillbox/bin --strip-components 1 bin

# TODO: make a backup directory of previous sites and then compare new sites to
# find any sites that should be deleted. This would only be applicable to server
# version; not docker version.
tmp_sites_artifact=$(mktemp)
aws --endpoint-url "$S3_ARTIFACT_ENDPOINT_URL" \
  s3 cp s3://$ARTIFACT_BUCKET_NAME/_sites/$SITES_ARTIFACT \
  $tmp_sites_artifact
mkdir -p /etc/chillbox/sites/
tar x -z -f $tmp_sites_artifact -C /etc/chillbox/sites --strip-components 1 sites

echo "export CHILLBOX_SERVER_NAME=$CHILLBOX_SERVER_NAME" > /etc/chillbox/site_env_vars
echo '$CHILLBOX_SERVER_NAME' > /etc/chillbox/site_env_names


mkdir -p /usr/local/src/
cd /usr/local/src/

aws --version

# Support s6 init scripts.
# Only if not using container s6-overlay and using openrc instead.
apk add s6 s6-portable-utils
rc-update add s6-svscan boot

current_working_dir=/usr/local/src
sites=$(find /etc/chillbox/sites -type f -name '*.site.json')
for site_json in $sites; do
  slugname=$${site_json%.site.json}
  slugname=$${slugname#/etc/chillbox/sites/}
  export slugname
  export server_name="$slugname.test"
  echo "$slugname"
  echo "$server_name"
  cd $current_working_dir

  # no home, or password for user
  adduser -D -h /dev/null -H "$slugname" || printf "Ignoring adduser error"
  export version="$(jq -r '.version' /etc/chillbox/sites/$slugname.site.json)"

  jq -r \
    '.env[] | "export " + .name + "=" + .value' /etc/chillbox/sites/$slugname.site.json \
      | envsubst '$S3_ENDPOINT_URL $IMMUTABLE_BUCKET_NAME $slugname $version $server_name' >> /etc/chillbox/site_env_vars
  jq -r '.env[] | "$" + .name' /etc/chillbox/sites/$slugname.site.json | xargs >> /etc/chillbox/site_env_names

  tmp_artifact=$(mktemp)
  aws --endpoint-url "$S3_ARTIFACT_ENDPOINT_URL" \
    s3 cp s3://$ARTIFACT_BUCKET_NAME/$slugname/$slugname-$version.artifact.tar.gz \
    $tmp_artifact
  tar x -z -f $tmp_artifact $slugname
  rm $tmp_artifact
  slugdir=$current_working_dir/$slugname
  chown -R $slugname:$slugname $slugdir

  # init chill
  cd $slugdir/chill
  su -p -s /bin/sh $slugname -c 'chill initdb'
  su -p -s /bin/sh $slugname -c 'chill load --yaml chill-data.yaml'

  if [ "$(jq -r '.freeze // false' /etc/chillbox/sites/$slugname.site.json)" = "true" ]; then
    echo 'freeze';
    jq -r \
      '.chill_env[] | "export " + .name + "=" + .value' \
        /etc/chillbox/sites/$slugname.site.json \
        | envsubst '$S3_ENDPOINT_URL $IMMUTABLE_BUCKET_NAME $slugname $version $server_name' \
          > .env
    chown $slugname:$slugname .env
    source .env
    su -p -s /bin/sh $slugname -c 'chill freeze'
  else
    echo 'dynamic';
    cat <<PURR > /etc/init.d/chill-$slugname
#!/sbin/openrc-run
name="chill-$slugname"
description="chill-$slugname"
user="$slugname"
group="$slugname"
supervisor=s6
s6_service_path=/etc/services.d/chill-$slugname
depend() {
  need s6-svscan net localmount
  after firewall
}
PURR
    chmod +x /etc/init.d/chill-$slugname
    mkdir -p /etc/services.d/chill-$slugname
    cat <<MEOW > /etc/services.d/chill-$slugname/run
#!/bin/execlineb -P
s6-setuidgid $slugname
cd $slugdir/chill
MEOW
    jq -r \
      '.chill_env[] | "s6-env " + .name + "=" + .value' \
        /etc/chillbox/sites/$slugname.site.json \
        | envsubst '$S3_ENDPOINT_URL $IMMUTABLE_BUCKET_NAME $slugname $version $server_name' \
          >> /etc/services.d/chill-$slugname/run
    cat <<MEOW >> /etc/services.d/chill-$slugname/run
chill serve
MEOW
    chmod +x /etc/services.d/chill-$slugname/run
    rc-update add chill-$slugname default
    rc-service chill-$slugname start
  fi

  cd $slugdir
  # install site root dir
  mkdir -p $slugdir/nginx/root
  rm -rf /srv/$slugname
  mkdir -p /srv/$slugname
  mv $slugdir/nginx/root /srv/$slugname/
  chown -R nginx:nginx /srv/$slugname/
  mkdir -p /var/log/nginx/
  rm -rf /var/log/nginx/$slugname/
  mkdir -p /var/log/nginx/$slugname/
  chown -R nginx:nginx /var/log/nginx/$slugname/
  # Install nginx templates that start with slugname
  mv $slugdir/nginx/templates/$slugname*.nginx.conf.template /etc/chillbox/templates/
  rm -rf $slugdir/nginx
  # Set version
  mkdir -p /srv/chillbox/$slugname
  chown -R nginx:nginx /srv/chillbox/$slugname/
  echo "$version" > /srv/chillbox/$slugname/version.txt
done


mkdir -p /srv/chillbox
chown -R nginx:nginx /srv/chillbox/
mkdir -p /var/cache/nginx
chown -R nginx:nginx /var/cache/nginx
mkdir -p /var/log/nginx/
mkdir -p /var/log/nginx/chillbox/
chown -R nginx:nginx /var/log/nginx/chillbox/
rm -rf /etc/nginx/conf.d/
mkdir -p /etc/nginx/conf.d/
chown -R nginx:nginx /etc/nginx/conf.d/
source /etc/chillbox/site_env_vars
for template_path in /etc/chillbox/templates/*.nginx.conf.template; do
  template_file=$(basename $template_path)
  envsubst "$(cat /etc/chillbox/site_env_names)" < $template_path > /etc/nginx/conf.d/$${template_file%.template}
done
chown -R nginx:nginx /etc/nginx/conf.d/

# Create certs for all sites
mkdir -p /var/lib/acmesh
chown -R nginx:nginx /var/lib/acmesh
for site_json in $sites; do
  slugname=$${site_json%.site.json}
  slugname=$${slugname#/etc/chillbox/sites/}
  export slugname
  domain_list=$(jq -r '.domain_list[]' $site_json)
  # Reset and add the --domain option for each to the $@ variable
  set -- ""
  for domain in $domain_list; do
    set -- "$@" --domain $domain
  done

  acme.sh --issue \
    --server $LETS_ENCRYPT_SERVER \
    "$@" \
    --webroot /srv/$slugname/root/

  acme.sh --install-cert \
    --server $LETS_ENCRYPT_SERVER \
    "$@" \
    --cert-file /var/lib/acmesh/$slugname.cer \
    --key-file /var/lib/acmesh/$slugname.key \
    --reloadcmd 'nginx -t && nginx -s reload' \
done

nginx -t
rc-update add nginx default
rc-service nginx start
