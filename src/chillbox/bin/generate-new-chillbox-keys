#!/usr/bin/env sh

set -o errexit
set -o nounset

script_name="$(basename "$0")"


usage() {
  cat <<HERE

Generate a private and public key pair to encrypt and decrypt content that is
less than 382 bytes.  This is a wrapper script around the openssl genpkey
-algorithm RSA, and openssl rsa -pubout commands.

Usage:
  $script_name -h
  $script_name <options>

Options:
  -h        Show this help message.

  -n        Set a key name to use, defaults to hostname.

  -d        Path to a directory to store the keys in.

HERE
}

key_name="$(hostname -s | xargs)"
keys_data_dir=""
while getopts "hn:d:" OPTION ; do
  case "$OPTION" in
    h) usage
       exit 0 ;;
    n) key_name=$OPTARG ;;
    d) keys_data_dir=$OPTARG ;;
    ?) usage
       exit 1 ;;
  esac
done
shift $((OPTIND - 1))

test -n "$keys_data_dir" || (echo "ERROR $script_name: No keys directory provided." && exit 1)
test -d "$keys_data_dir" || (echo "ERROR $script_name: The path to the keys directory doesn't exist. $keys_data_dir" && exit 1)

public_pem_file="$keys_data_dir/$key_name.public.pem"
private_pem_file="$keys_data_dir/$key_name.private.pem"

if [ -e "$public_pem_file" ] || [ -e "$private_pem_file" ]; then
  echo "ERROR $script_name: The public or private keys already exist. $public_pem_file $private_pem_file"
  exit 4
fi

create_private_and_public_keys() {
  umask 0077
  openssl genpkey \
    -out "$private_pem_file" \
    -outform "PEM" \
    -algorithm RSA \
    -pkeyopt "rsa_keygen_bits:4096" \
    -pkeyopt "rsa_keygen_primes:2"

  openssl rsa \
    -pubout \
    -inform "PEM" \
    -outform "PEM" \
    -in "$private_pem_file" \
    -out "$public_pem_file"

  # Only allow reading it after it is written to prevent chance of overwriting the
  # generated key files. Double tap here in case umask wasn't set.
  chmod 0400 "$private_pem_file"
  chmod 0400 "$public_pem_file"
}

create_private_and_public_keys
