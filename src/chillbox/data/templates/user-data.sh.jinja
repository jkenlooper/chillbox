#!/usr/bin/env -S sh -o errexit

work_dir="$(dirname "$0")"

install_packages() {
  apk update
  apk upgrade
  apk add \
    -q --no-progress \
    attr \
    coreutils \
    doas \
    nftables \
    openssh-server-pam \
    openssl \
    s6 \
    s6-portable-utils \
    shadow

  rc-update add s6-svscan boot
}


init_user() {
  #{#-
  # Only the owner is added initially in the user-data script.
  #  This is because only a single list of public ssh keys are provided to the
  #  cloud host api. These get set to /root/.ssh/authorized_keys which the
  #  user-data script will copy over to the owner's .ssh/authorized_keys.
  #  Having other users being set up initially would include all their public
  #  ssh keys as well for every user being created. The other login users could
  #  be added later in a remote run task.

  # Configure doas to not allow root privileges on a lot of stuff including not
  # allowing any user to be root?
  # Set the owner of the private key to be root, use a service that watches for
  # file events in order to decrypt files. This way no user has access to the
  # private key and the private key stays in a tmpfs mount which will be lost if
  # the server reboots.
  #}
useradd -m -U -p '{{ user_pw_hash }}' '{{ user }}'

#{#-
# Include the user to the chillconf group so login users can
# modify the /etc/chillbox/chillbox.config file.
#}
groupadd --system chillconf
usermod -a -G chillconf '{{ user }}'

#{#-
# Set password as expired to force user to reset when logging in
#}
passwd --expire '{{ user }}'

mkdir -p '/home/{{ user }}/.ssh'
printf '%b' "{{ public_ssh_keys | join('\n') }}" > '/home/{{ user }}/.ssh/authorized_keys'
chown -R '{{ user }}:{{ user }}' '/home/{{ user }}/.ssh'
chmod -R 700 '/home/{{ user }}/.ssh'
chmod -R 644 '/home/{{ user }}/.ssh/authorized_keys'

mkdir -p /etc/doas.d
cat <<DOAS_CONFIG > /etc/doas.d/chillbox.doas.conf
permit persist {{ user }} as root
DOAS_CONFIG
chmod 0600 /etc/doas.d/chillbox.doas.conf
doas -C /etc/doas.d/chillbox.doas.conf && echo "doas config ok"

#{#-
# Configure sshd to only allow users with authorized_keys to ssh in. The root
# user is blocked from logging in. PAM needs to be added and enabled for it to
# work with the AuthorizedKeysFile and publickey method.
#}

cat <<SSHD_CONFIG > /etc/ssh/sshd_config
AuthenticationMethods publickey,keyboard-interactive
AuthorizedKeysFile .ssh/authorized_keys
ChallengeResponseAuthentication yes
KbdInteractiveAuthentication no
PasswordAuthentication no
PermitRootLogin no
PubkeyAuthentication yes
UsePAM yes
SSHD_CONFIG

sshd -t
rc-service sshd restart
}


nftables_setup() {
#{#- Include the nftables script that was defined for this server.  #}
cat <<'HERE' > "$work_dir/chillbox.nft"
{% include [nft_script, 'archive/chillbox.nft', 'chillbox/chillbox.nft'] %}
HERE
chmod u+x "$work_dir/chillbox.nft"
"$work_dir/chillbox.nft"
}

create_scripts() {
cat <<'DECRYPT_FILE_HERE' > "/usr/local/bin/decrypt-file"
{% include [scripts_decrypt_file, 'archive/scripts/decrypt-file', 'scripts/decrypt-file'] %}
DECRYPT_FILE_HERE
chmod +x "/usr/local/bin/decrypt-file"

cat <<'DECRYPT_FILE_HERE' > "/usr/local/bin/encrypt-file"
{% include [scripts_encrypt_file, 'archive/scripts/encrypt-file', 'scripts/encrypt-file'] %}
DECRYPT_FILE_HERE
chmod +x "/usr/local/bin/encrypt-file"

cat <<'CREATE_ASYMMETRIC_KEY_HERE' > "/usr/local/bin/create-asymmetric-key"
{% include [scripts_create_asymmetric_key, 'archive/scripts/create-asymmetric-key', 'scripts/create-asymmetric-key'] %}
CREATE_ASYMMETRIC_KEY_HERE
chmod +x "/usr/local/bin/create-asymmetric-key"
}

install_packages
nftables_setup
init_user
create_scripts

mkdir -p /root/chillbox/key
key_name="$(hostname -s | xargs)"
/usr/local/bin/create-asymmetric-key -n "$key_name" -d /root/chillbox/key
mv /root/chillbox/key/$key_name.public.pem /usr/local/share/chillbox/key/
